import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {
  public static int INF=99999;
	public static int MAXDEPTH=0;
	public static int MDEPTH=8;
	
	public static String toString2(char [] v){
		String s = new String();
		for(int i = 0; i < v.length; i++)
			s+= v[i]; 
		return s;
	}
	
	public static void porti(char[][] board, int x, int y){
		int i = 0, j = 0 ;
		for( i = 0; i < x; i++)
			for( j = 0; j < y; j ++){
				if(board[i][j] == '-'){
					if(board[i-1][j] == '#' && board[i+1][j] == '#')
						board[i][j] = 'p';
					else if (board[i][j+1] == '#' && board[i][j-1] == '#')
						board[i][j] = 'p';
				}
			}
	}
	
	public static int[] available_moves_r(int x, int y, char[][] board){
		int [] result = new int[8];
		int i = 0;
		if(board[x+1][y] == '-' || board[x+1][y] == 'p'){
			result[i] = x+1;
			result[i+1] = y;
			i = i+2;
		}
		if(board[x][y+1] == '-' || board[x][y+1] == 'p'){
			result[i] = x;
			result[i+1] = y+1;
			i = i+2;
		}

		if(board[x][y-1] == '-' || board[x][y-1] == 'p'){
			result[i] = x;
			result[i+1] = y-1;
			i = i+2;
		}
		if(board[x-1][y] == '-' || board[x-1][y] == 'p' ){
			result[i] = x-1;			
			result[i+1] = y;
			i = i+2;
		}
		
	
		return result;
		}
		public static int[] available_moves_g(int x, int y, char[][] board){
			int [] result = new int[8];
			int i = 0;
			if(board[x][y-1] == '-' || board[x][y-1] == 'p'){
				result[i] = x;
				result[i+1] = y-1;
				i = i+2;
			}
			if(board[x-1][y] == '-' || board[x-1][y] == 'p' ){
				result[i] = x-1;			
				result[i+1] = y;
				i = i+2;
			}
			if(board[x][y+1] == '-' || board[x][y+1] == 'p'){
				result[i] = x;
				result[i+1] = y+1;
				i = i+2;
			}
			if(board[x+1][y] == '-' || board[x+1][y] == 'p'){
				result[i] = x+1;
				result[i+1] = y;
				i = i+2;
			}
		
		return result;
	}
	
	

public static int[] negaMax(char[][] board, char ply1,char ply2, int rand1,int coloana1,int rand2, int coloana2, int depth, int p1, int [] size)
{ 	int max = -INF;
	int [] rezultat = new int [3];
	int [] vect = new int [3];
	if(depth<MDEPTH){
		//DACA BOTUL ADVERSARULUI NU MAI POATE FACE NICIO MISCARE
		if((available_moves_r(rand2, coloana2, board))[0] == 0){
			    //DACA NICI NOI NU MAI PUTEM FACE MUTARI => EGALITATE
				if((available_moves_r(rand1, coloana1, board))[0] == 0){
						rezultat[0] = 0;
						//rezultat[1] = rand1;
						//rezultat[2] = coloana1;
						return rezultat;
				}
				//DACA NOI MAI AVEM MUTARI => VICTORIE
				else{
					rezultat[0] = INF;
					rezultat[1] = (available_moves_r(rand1, coloana1, board))[0];
					rezultat[2] =(available_moves_r(rand1, coloana1, board))[1];
					//System.out.println("banana");
					return rezultat;
				}			
	     }
		//DACA BOTUL ADVERSARULUI MAI ARE MISCARI
		else{
			//DACA NOI NU MAI AVEM MISCARI => INFRANGERE
			if((available_moves_r(rand1, coloana1, board))[0] == 0){
				rezultat[0] = -INF;
				return rezultat;
			}
			//DACA AMANDOI AVEM MISCARI
			else{
				//AM AJUNS PE O POARTA SI PRIMIM UN SCOR MAI MARE
				if(p1 == 1){
					rezultat[0] = 55;
					//System.out.println("ana");
				}
				if(rand1 == size[0]/2 && coloana1 == size[1]/2 )
					rezultat[0] += 77;
				if(rand1 == size[0]/2 - 1 && coloana1 == size[1]/2 - 1 )
					rezultat[0] += 77;
				if(rand1 == size[0]/2 + 1 && coloana1 == size[1]/2 + 1 )
					rezultat[0] += 77;
				if(rand1 == size[0]/2 - 2 && coloana1 == size[1]/2 - 2 )
					rezultat[0] += 77;
				if(rand1 == size[0]/2 + 2 && coloana1 == size[1]/2 + 2 )
					rezultat[0] += 77;
				//VERIFICAM CE MUTARI POSIBILE MAI AU CEI DOI JUCATORI
				int [] vect1 = new int [8];
				int [] vect2 = new int [8];
				if(rand1 <= size[0]/2){
				vect1 = available_moves_g(rand1, coloana1, board);
				vect2 = available_moves_r(rand2, coloana2, board);
				}
				else{
					vect1 = available_moves_r(rand1, coloana1, board);
					vect2 = available_moves_g(rand2, coloana2, board);
				}
				for(int i = 0; i < 8; i = i+2)
					if(vect1[i] != 0 && vect1[i+1]!=0)
						for(int j = 0; j < 8; j = j+2)
							if(vect2[j] != 0 && vect2[j+1]!=0){
								int p2 = 1, p3 = 1;
								if(board[vect1[i]][vect1[i+1]] == 'p')
										{p1 = 1; p3 =0; }//System.out.println("1234");}
								else
										p1 = 0;
								if(board[vect2[j]][vect2[j+1]] == 'p')
										p2 = 0;
								board[vect1[i]][vect1[i+1]]=ply1;
								board[vect2[j]][vect2[j+1]]=ply2;
								vect = negaMax(board,ply1,ply2,vect1[i],vect1[i+1],vect2[j],vect2[j+1],depth+1, p1, size);
								if(vect[0] > max){
									max = vect[0];
									rezultat[1] = vect1[i];
									rezultat[2] = vect1[i+1];
									
								}
								if(p3 == 1)
									board[vect1[i]][vect1[i+1]]='-';
								else
									board[vect1[i]][vect1[i+1]]='p';
								if(p2 == 1)
									board[vect2[j]][vect2[j+1]]='-';
								else 
									board[vect2[j]][vect2[j+1]]='p';
	
							}
				
			rezultat[0]+= max;	
			}
		}
		
	}
	rezultat[0]+=0;//depth; //8 - depth;
	return rezultat;
}
	
	

public static String getMove(int l1, int c1, int l2, int c2)
{	String a = new String();
	if(c1-c2 == -1)  a= "LEFT";
	else if(c1-c2 == 1) a= "RIGHT";
	else if(l1-l2== -1) a= "UP";
	else if(l1-l2 == 1) a= "DOWN";
	return a;
}


public static void nextMove(String player, int[] pos, String [] board, int [] size){
	
	int aux1,aux2;
	String aux=new String();
	int nrand,ncol;
	nrand = board.length;
	ncol = board[0].length();
	char [][] c = new char[nrand][ncol];
	for (int i =0; i < nrand; i++)
		c[i] = board[i].toCharArray();
	porti(c, size[0], size[1]);
	
	/*for(int i = 0; i<size[0]; i++)
		{for(int j=0; j< size[1]; j++)
			System.out.print(c[i][j]);
	System.out.print("\n");}*/
		
	char [][] c1 = new char[nrand][ncol];
	for (int i =0; i < nrand; i++)
		c1[i] = board[i].toCharArray();
	int [] vect = new int[8];
	vect = available_moves_r(pos[0], pos[1], c);
	//for(int i =0; i<8; i++)
	//	System.out.print(vect[i] +" ");
	
	if(player.charAt(0)=='g') {
		aux1=pos[2];aux2=pos[3];
		int [] k=new int[3];
		int p1 = 0;
		k=negaMax(c,'g','r',pos[2],pos[3],pos[0],pos[1],0, p1, size);
		c[k[1]][k[2]]='g';
		aux = getMove(k[1],k[2],pos[2],pos[3]);
	}
							
	else {
		aux1=pos[0];
		aux2=pos[1];
		int [] k=new int[3];
		//k[0]=-INF;
		int p1 = 0;
		k=negaMax(c,'r','g',pos[0],pos[1],pos[2],pos[3],0, p1, size);
		//System.out.println(k[0] +" " +k[1] +" " + k[2] + " " +pos[0] +" " +pos[1]);
		c[k[1]][k[2]]='r';
		aux = getMove(k[1],k[2],pos[0],pos[1]);
	}
	
	for (int i =0; i < nrand; i++)
		board[i] = toString2(c1[i]);	
	
	System.out.print(aux);	
  }

public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        in.useDelimiter("\n");
        String player = in.next();
        String pos = in.next();
        String[] str_pos = pos.split(" ");
        int[] position = new int[4];
        int[] sizes = new int[2];

        for(int i=0;i<4;i++) {
            position[i] = Integer.parseInt(str_pos[i]);
        }
        pos = in.next();
        str_pos = pos.split(" ");
        for(int i=0;i<2;i++) {
            sizes[i] = Integer.parseInt(str_pos[i]);
        }

        String board[] = new String[sizes[ 0 ]];

        for(int i = 0; i < sizes[ 0 ]; i++) {
            board[i] = in.next();
        }

    nextMove(player,position,board,sizes);
    
    }
}
